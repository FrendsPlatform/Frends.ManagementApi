#pragma warning disable SA1000 // Keywords should be spaced correctly. new() vs new ().
#pragma warning disable SA1503 // Braces should not be omitted
namespace Frends.ManagementApi.Request;

using Frends.ManagementApi.Request.Definitions;
using RestSharp;
using RestSharp.Authenticators.OAuth2;
using System;
using System.ComponentModel;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

/// <summary>
/// Frends Management API Task.
/// </summary>
public static class ManagementApi
{
    /// <summary>
    /// Task for reading data from Frends Management API.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.ManagementApi.Request).
    /// </summary>
    /// <param name="input">Input parameters.</param>
    /// <param name="options">Option parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this Task.</param>
    /// <returns>Object { bool Success, dynamic Data, dynamic ErrorMessage }.</returns>
    public static async Task<Result> Request([PropertyTab] Input input, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        InputChecker(input);
        var responseMessage = await GetRestResponse(input, options.Timeout, cancellationToken);

        if (responseMessage.ErrorMessage.Length > 0 && options.ThrowExceptionOnError)
            throw new Exception(responseMessage.ErrorMessage);

        return new Result(responseMessage.ErrorMessage.Length > 0, responseMessage, responseMessage.ErrorMessage);
    }

    private static void InputChecker(Input input)
    {
        if (string.IsNullOrEmpty(input.Url))
            throw new ArgumentNullException(nameof(input.Url) + " cannot be empty.");
        if (string.IsNullOrEmpty(input.Token))
            throw new ArgumentNullException(nameof(input.Token) + " cannot be empty.");
    }

    private static Method GetMethod(Methods methods)
    {
        return methods switch
        {
            Methods.Get => Method.Get,
            Methods.Post => Method.Post,
            Methods.Put => Method.Put,
            Methods.Patch => Method.Patch,
            Methods.Delete => Method.Delete,
            _ => throw new ArgumentNullException(nameof(methods)),
        };
    }

    private static ParameterType GetParameterType(ParameterTypes parameterTypes)
    {
        return parameterTypes switch
        {
            ParameterTypes.GetOrPost => ParameterType.GetOrPost,
            ParameterTypes.UrlSegment => ParameterType.UrlSegment,
            ParameterTypes.HttpHeader => ParameterType.HttpHeader,
            ParameterTypes.RequestBody => ParameterType.RequestBody,
            ParameterTypes.QueryString => ParameterType.QueryString,
            _ => throw new ArgumentNullException(nameof(parameterTypes)),
        };
    }

    private static async Task<RestResponse> GetRestResponse(Input input, int timeout, CancellationToken cancellationToken)
    {
        RestClientOptions restClientOptions = new()
        {
            BaseUrl = new Uri(input.Url),
            MaxTimeout = (int)TimeSpan.FromSeconds(Convert.ToDouble(timeout)).Ticks,
            Authenticator = new OAuth2AuthorizationRequestHeaderAuthenticator(input.Token, "Bearer"),
        };
        RestClient restClient = new(restClientOptions);
        RestRequest request = null;

        request.Resource = "/";
        request.Method = GetMethod(input.Method);
        request.AlwaysMultipartFormData = input.IsMultipart;
        request.AddHeader("Content-Type", input.IsMultipart ? "multipart/form-data" : "application/json");
        request.AddHeader("Accept", "application/json");

        if (input.ManualParameters.Length > 0)
        {
            foreach (var manualParameter in input.ManualParameters)
            {
                cancellationToken.ThrowIfCancellationRequested();
                request.AddParameter(manualParameter.Key, manualParameter.Value, GetParameterType(manualParameter.ParameterType));
            }
        }

        if (input.FileHandler is FileHandler.Upload)
        {
            foreach (var file in input.FilePaths)
            {
                cancellationToken.ThrowIfCancellationRequested();

                if (!File.Exists(file.Fullpath))
                    throw new FileNotFoundException("Input file was not found. File: " + file.Fullpath);
                var fileParameterKey = file.FileParameterKey switch
                {
                    FileParameterKey.File => "file",
                    _ => "content",
                };
                request.AddFile(fileParameterKey, file.Fullpath);
            }

            return await restClient.ExecuteAsync(request, cancellationToken);
        }

        request.Resource = "#";
        var fileBytes = restClient.DownloadData(request);
        File.WriteAllBytes(Path.GetFullPath(input.DownloadPath), fileBytes);
        return null;
    }
}